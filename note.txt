Postman

Workspace: area dimana kita bisa mengelompokkan, organize, dan manage API collections

response:
body (di dalamnya terdapat actual body yang dikembalikan dari server. bisa dilihat di pretty format atau raw atau format lain yang tersedia)
• status
• time
• size

Collection.
1. collection: kumpulan api requests dan bisa disimpan di logical arrangement
2. test: bisa memberikan script yang umum digunakan di keseluruhan request pada collection tersebut
3. variable: menambahkan variabel yang digunakan di keseluruhan request pada collection tersebut
4. monitor collection: run collection secara periodik (contoh: di interval 10 menit/5 menit dan mengecek response performance
5. add folder di dalam collections: cara agar bisa melakukan beberapa logical grouping request di dalam collection

How to run collection --done
1. Klik run
2. Pilih colletion, environment
3. Tentukan jumlah pengulangan
result:
• fail dan pass
• status, time, dan size
• run summary: ringkasan result
• export result (JSON)
• retry: mengulangi run dengan konfigurasi yang sama

Variables: elemen (data store) yang bisa berbeda values

Mengapa menggunakan variable?
to reuse values at multiple places
avoid repetition
to avoid re-work when value changes
 
penggunaan variable
contoh: menambahkan url sebagai variable-nya
menggunakan double curly braces {{}}
penggunaan variable: collection dan environment

Manage environment
1. create environment
2. create variable di environment (create global: create variable secara global)

tips:
jika menggunakan beberapa variavle dan ingin  melihat persis value dan effort selama test, bisa menggunakan postman console (view --> show postman console)
setiap kali melakukan request, log nya akan tersimpan di postman console

1. How to get variables through scripts
2. How to set variables through scripts

//pm.variables.get();
//pm.variables.set();

//pm.globals.get();
//pm.globals.set();

//pm.environment.get();
//pm.environment.set(); 

Environment: a set of key-value pairs

Snippets - script templates
Postman tests are javascript code that is executed after receiving the response
Pre request script: akan dieksekusi sebelum mengirimkan request
Test: dieksekusi setelah menerima response

environment dan variable?
• Environment, untuk membuat variabel dengan nilai yang berbeda sesuai dengan lingkungan (environment) yang ingin diuji coba. Manfaatnya, kita tidak repot lagi mengganti-ganti URL atau nilai-nilai apapun untuk menguji API endpoint yang ada di localhost dan server online.
• Dengan bantuan fitur environment ini, lebih mudah untuk menguji endpoint-endpoint yang ada pada aplikasi yang dibuat di beberapa lingkungan server yang berbeda.

perbedaan kegunaan environment dan variable (dalam implementasinya)?
debug (masih bingung)
newman (masih bingung)

soal form-data atau raw-json,
itu tergantung desain BEnya.
jd kita harus tau content-type nya apa dulu,

bikin env kosongan
terus coba nerapin script ini di tests postman,
lalu coba post login di https://reqres.in/api/login
bodynya sesuai di web reqres

var dataB = JSON.parse(responseBody);

if(responseCode.code === 200){
    pm.environment.set("TokenReqres",dataB.token);
    tests["Success to Login"] = true;
    tests["type=" + dataB.token] = true;
}
else{
    tests["Failed to Login"] = false;
}


json: 
• format pertukaran data tekstual yang sangat ringan
• syntax nya sangat sederhana dan jelas (dibanding dengan xml)
• dapat digunakan pada beragam bahasa pemrograman
• tiap bahasa punya cara tersendiri untuk berinteraksi dengan json
• dibuat berdasarkan format object pada js
• digunakan untuk file konfig (tidak disarankan krn json tidak support syntax comment, biasanya file konfig butuh comment)
• json = pasangan key dan value, yang disebut properti. key selalu dibungkus ""
• json tidak memiliki method, sehingga tidak boleh membuat json yang terdapat function di dalamnya

• Same origin policy: kebijakan browser untuk mengakses dan menampilkan data/script/document dari tempat lain diluar domainnya (tidak bisa akses data (.json) diluar domain/web kita)
• Harus melakukan konfigurasi CORS (cross origin resource sharing) pada server
•  CORS: mekanisme yang membuat kita dapat mengakses sebuah resource (data, documen, script) dari domain lain
• Caranya dengan membuat server memperbolehkan adanya akses data dari luar domain
• Modifikasi Access-Control-Allow-Origin
• Membuat file .htaccess

Mockoon
How to mock api
How to create local api server 
How to create fake rest api 

When you need to mock/mimic API for
• Testing
• Completing a scenario
• Fill in the missing links in api use-case


Selenium

• open source otomatis framewoke testing yang digunakan untuk validasi web app dengan perbedaan browsers dan platforms
• selenium bukan hanya satu tool tetapi serangkaian perangkat lunak, masing-masing bagian melayani kebutuhan pengujian yang berbeda dari suatu organization yang dimiliki
• 4 tipe selenium
		1. Selenium (IDE)
		2. Selenium (RC)
		3. WebDriver
		4. Selenium Grid
